Python Libraries
================

Python not only has modules, but bundled collections of modules called libraries
or packages.  
These are collected by other developers and work for a specific purpose.

As we progress in the class we are going to start 
working with the ``NumPy`` and ``Pandas`` libraries.  
Both of these libraries have collections of 
modules that will help us work with data more efficiently.

``Pandas`` is a library curated for working with data sets.  
We will learn more about it later when we start working with data and data sets. 
Before moving on, let's see how we can use one of its methods, ``Series``. 

Importing a Library
-------------------

When we import a library, we use the same syntax as we did with modules.

.. sourcecode:: python

   import library_name

Using ``pandas.Series()``: An Example
-------------------------------------

.. admonition:: Example

   **Note:** When you run this code block for the first time, it will take replit a few moments to install the library.

   .. replit:: python
      :slug: Pandas-Series-Demo

      import pandas as pd 

      birds = ["Sparrow", "Cardinal", "Red-Tail Hawk", "Downy Woodpecker", "Carolina Wren", "Mourning Doves", "Mockingbird", "Cooper's Hawk", "Dark-Eyed Junko"]

      print(pd.Series(birds))

   **Console Output**

   ::

      0             Sparrow
      1            Cardinal
      2       Red-Tail Hawk
      3    Downy Woodpecker
      4       Carolina Wren
      5      Mourning Doves
      6         Mockingbird
      7       Cooper's Hawk
      8     Dark-Eyed Junko
      dtype: object


In this example, the ``Series`` method prints both the 
items in a provided, ``birds``, an autogenerated index, and the data type.  
The index starts at zero in this example, and the data type is an object.

The ``Series()`` Method Signature
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you want to provide your own index, you can use the parameters of the ``Series`` method.


.. admonition:: Example

   .. sourcecode:: python

      class pandas.Series(data = None, index = None, dtype = None, name = None, copy = False, fastpath = False)

   The method signature for ``Series`` was found in the `pandas documentation page <https://pandas.pydata.org/docs/reference/api/pandas.Series.html?highlight=series#>`_.


.. admonition:: Tip
   
   Remebmer, when working with parameters the order of your arguments matters.


The ``data`` and ``index`` Parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you notice, all of the parameters have a default setting.  
We can pass a second argument to the ``Series`` method and create our own ``index``.
The only caveat is that the collections we are passing must be the same length.

Let's pass a second data set to create our index.

.. admonition:: Example

   .. replit:: python
      :slug: Series-Index-Demo

      import pandas as pd

      dog_names = ["Willow", "Behr", "Rocky", "Princess", "Onyx"]

      dog_breeds = ["Mutt", "German Shepherd", "Pomeranian", "Irish Setter", "Doberman Pinscher"]

      my_dog = pd.Series(dog_breeds, dog_names)

      print(my_dog)

   **Console Output**

   ::

      Willow               Heinz 57
      Behr          German Shepherd
      Rocky              Pomeranian
      Princess         Irish Setter
      Onyx        Doberman Pinscher
      dtype: object


In this example, our data set, ``dog_names`` was used as the index.

When working with the ``Series`` method, remember the order of your arguments.
The first argument is the ``data`` and the second is the ``index``.  

Becoming familiar with members of modules and libraries can help you better organize your data.

Why Use A Library?
------------------

This was a very brief intro into ``Pandas``.  
Hopefully, you were able to appreicate the simplicity of your code when we imported a library.
The methods and properties have already been defined.
You did not have to write any iterative code blocks, and still printed all elements in your data set.
This can speed up your workflow significantly.  


.. admonition:: Tip

   Libraries and modules can help you work smarter, not harder.



   







.. https://pandas.pydata.org/docs/reference/api/pandas.Series.html

.. https://www.w3schools.com/python/pandas/pandas_ref_dataframe.asp


